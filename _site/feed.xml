<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2025-01-15T21:57:23+01:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Your awesome title</title><subtitle>Write an awesome description for your new site here. You can edit this line in _config.yml. It will appear in your document head meta (for Google search results) and in your feed.xml site description.</subtitle><entry><title type="html">Introducing Ant: a simple background job processing library for Elixir</title><link href="http://localhost:4000/ant-background-job-processing-library.html" rel="alternate" type="text/html" title="Introducing Ant: a simple background job processing library for Elixir" /><published>2025-01-06T07:00:00+01:00</published><updated>2025-01-06T07:00:00+01:00</updated><id>http://localhost:4000/ant-background-job-processing-library</id><content type="html" xml:base="http://localhost:4000/ant-background-job-processing-library.html"><![CDATA[<p>In the Elixir community we are lucky to have a lot of great quality libraries backed by not only by core engineers, but also by the strong community. I use Elixir on a daily basis not only for my work, but also for my personal projects and never feel like I’m missing something crucial. At least in the web development area.</p>

<p>Nevertheless, recently I have decided to publish my new library called <a href="https://github.com/MikeAndrianov/ant">Ant</a> for background job processing.</p>

<h3 id="why-another-background-processing-library">Why another background processing library?</h3>

<p>Elixir comes with OTP out of the box. It is one of the competitive advantages, which makes Elixir a great choice for working with multiple concurrent processes. It allows to supervise them and handle failures gracefully.
Using <code class="language-plaintext highlighter-rouge">Task</code> or <code class="language-plaintext highlighter-rouge">GenServer</code> is a go-to solution for asynchronous code execution. <code class="language-plaintext highlighter-rouge">Agent</code> is a simple way to store data and share it between processes. For a lot of cases these solutions are more than enough.</p>

<p>Sometimes, however, it’s necessary to have more:</p>
<ol>
  <li><strong>Persist jobs between restarts</strong> <br />
Storing them in order to process them later or for debugging purposes</li>
  <li><strong>Retry failed jobs</strong></li>
  <li><strong>Monitor the status of your jobs</strong></li>
</ol>

<p>For such advanced cases the first what comes to my mind is <a href="https://github.com/oban-bg/oban">Oban</a>. It is a powerful, flexible and reliable library that has a lot of features. It is actively maintained. Many companies trust it and use it in production. Oban allows to choose between PostgreSQL and SQLite as a storage solution.</p>

<p>Then why did I decide to create my own library? Many years ago, when I first started to hear about Elixir, one of the main narratives was that Elixir, which is developed on top of the Erlang VM, inherited a rich Erlang ecosystem. You can use a lot of tools out of the box without any additional dependencies. One of these tools is Mnesia, a distributed database system. Unfortunately, I never saw it in a production environment in web development.</p>

<p>I was eager to try to apply it to my personal needs and decided to create a library for myself that would be simple and easy to use, with the ability to persist jobs and include retry mechanisms for failed jobs, without any additional dependencies. Thus, I built a proof of concept and released the first version of <code class="language-plaintext highlighter-rouge">ant</code>.</p>

<h3 id="how-to-use-ant">How to use Ant</h3>

<p>I always prefer to explain by real-world examples. So let’s imagine that we have a file with leads and we need to send an email to each of them.
This task can be broken down into several steps:</p>
<ol>
  <li>Create a file with <code class="language-plaintext highlighter-rouge">400_000</code> rows to <strong>create leads</strong></li>
  <li><strong>Parse the generated file</strong></li>
  <li><strong>For each row, emulate lead creation</strong></li>
  <li><strong>Send email for each lead</strong></li>
  <li>Make a mailer to raise an exception randomly to <strong>emulate possible real-world behavior</strong></li>
</ol>

<p>First thing first, we need to create a new elixir application:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>mix new ant_sandbox
</code></pre></div></div>

<p>The entry point may look like this:</p>

<div class="language-elixir highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">defmodule</span> <span class="no">AntSandbox</span> <span class="k">do</span>
  <span class="n">alias</span> <span class="no">AntSandbox</span><span class="o">.</span><span class="no">LeadReportGenerator</span>
  <span class="n">alias</span> <span class="no">AntSandbox</span><span class="o">.</span><span class="no">SendPromotionWorker</span>

  <span class="k">def</span> <span class="n">call</span><span class="p">()</span> <span class="k">do</span>
    <span class="ss">:observer</span><span class="o">.</span><span class="n">start</span><span class="p">()</span> <span class="c1"># optionally you can start the observer to monitor the application</span>

    <span class="ss">:ok</span> <span class="o">=</span> <span class="no">LeadReportGenerator</span><span class="o">.</span><span class="n">call</span><span class="p">()</span> <span class="c1"># 1. Create a file with 400_000 rows to create leads</span>

    <span class="no">File</span><span class="o">.</span><span class="n">stream!</span><span class="p">(</span><span class="s2">"leads.txt"</span><span class="p">)</span> <span class="c1"># 2. Parse the generated file</span>
    <span class="o">|&gt;</span> <span class="no">Stream</span><span class="o">.</span><span class="n">each</span><span class="p">(</span><span class="k">fn</span> <span class="n">line</span> <span class="o">-&gt;</span>
      <span class="n">line</span>
      <span class="o">|&gt;</span> <span class="no">String</span><span class="o">.</span><span class="n">trim</span><span class="p">()</span>
      <span class="o">|&gt;</span> <span class="n">send_promotion</span><span class="p">()</span>
    <span class="k">end</span><span class="p">)</span>
    <span class="o">|&gt;</span> <span class="no">Stream</span><span class="o">.</span><span class="n">run</span><span class="p">()</span>
  <span class="k">end</span>

  <span class="k">defp</span> <span class="n">send_promotion</span><span class="p">(</span><span class="n">email</span><span class="p">)</span> <span class="k">do</span> <span class="c1"># 3 and 4: Emulate lead creation and send email</span>
    <span class="no">SendPromotionWorker</span><span class="o">.</span><span class="n">perform_async</span><span class="p">(%{</span><span class="ss">email:</span> <span class="n">email</span><span class="p">})</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<p>Next, let’s start with the creation of a module responsible for generating a file with leads, which will later be used as a source of leads. Each row in the file contains a randomly generated email:</p>

<div class="language-elixir highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">defmodule</span> <span class="no">AntSandbox</span><span class="o">.</span><span class="no">LeadReportGenerator</span> <span class="k">do</span>
  <span class="k">def</span> <span class="n">call</span> <span class="k">do</span>
    <span class="no">File</span><span class="o">.</span><span class="n">open!</span><span class="p">(</span><span class="s2">"leads.txt"</span><span class="p">,</span> <span class="p">[</span><span class="ss">:write</span><span class="p">],</span> <span class="k">fn</span> <span class="n">file</span> <span class="o">-&gt;</span>
      <span class="mi">1</span><span class="o">..</span><span class="mi">400_000</span>
      <span class="o">|&gt;</span> <span class="no">Stream</span><span class="o">.</span><span class="n">map</span><span class="p">(</span><span class="o">&amp;</span><span class="n">generate_email</span><span class="o">/</span><span class="mi">1</span><span class="p">)</span>
      <span class="o">|&gt;</span> <span class="no">Stream</span><span class="o">.</span><span class="n">each</span><span class="p">(</span><span class="o">&amp;</span><span class="no">IO</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="n">file</span><span class="p">,</span> <span class="nv">&amp;1</span> <span class="o">&lt;&gt;</span> <span class="s2">"</span><span class="se">\n</span><span class="s2">"</span><span class="p">))</span>
      <span class="o">|&gt;</span> <span class="no">Stream</span><span class="o">.</span><span class="n">run</span><span class="p">()</span>
    <span class="k">end</span><span class="p">)</span>
  <span class="k">end</span>

  <span class="k">defp</span> <span class="n">generate_email</span><span class="p">(</span><span class="n">id</span><span class="p">)</span> <span class="k">do</span>
    <span class="n">first_name</span> <span class="o">=</span> <span class="no">Enum</span><span class="o">.</span><span class="n">random</span><span class="p">([</span><span class="s2">"john"</span><span class="p">,</span> <span class="s2">"jane"</span><span class="p">,</span> <span class="s2">"alex"</span><span class="p">,</span> <span class="s2">"michael"</span><span class="p">,</span> <span class="s2">"david"</span><span class="p">,</span> <span class="s2">"lisa"</span><span class="p">])</span>
    <span class="n">last_name</span> <span class="o">=</span> <span class="no">Enum</span><span class="o">.</span><span class="n">random</span><span class="p">([</span><span class="s2">"smith"</span><span class="p">,</span> <span class="s2">"williams"</span><span class="p">,</span> <span class="s2">"brown"</span><span class="p">,</span> <span class="s2">"jones"</span><span class="p">,</span> <span class="s2">"garcia"</span><span class="p">])</span>
    <span class="n">domain</span> <span class="o">=</span> <span class="no">Enum</span><span class="o">.</span><span class="n">random</span><span class="p">([</span><span class="s2">"gmail.com"</span><span class="p">,</span> <span class="s2">"yahoo.com"</span><span class="p">,</span> <span class="s2">"hotmail.com"</span><span class="p">,</span> <span class="s2">"example.com"</span><span class="p">])</span>

    <span class="s2">"</span><span class="si">#{</span><span class="n">first_name</span><span class="si">}</span><span class="s2">.</span><span class="si">#{</span><span class="n">last_name</span><span class="si">}#{</span><span class="n">id</span><span class="si">}</span><span class="s2">@</span><span class="si">#{</span><span class="n">domain</span><span class="si">}</span><span class="s2">"</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<p>A new file <code class="language-plaintext highlighter-rouge">leads.txt</code> will be generated with 400,000 emails inside. Let’s pretend that we received this file from our marketing team.
So far so good. <br />
The next step is to implement the module responsible for creating leads and sending them emails. Sending emails to big amount of users might take some time, thus it is a good idea to make it asynchronous. Failure during the creation or sending of an email for a single lead should not affect others. That’s why it is worth using separate workers for each lead.</p>

<p>Add <code class="language-plaintext highlighter-rouge">ant</code> to our dependencies:</p>

<div class="language-elixir highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="n">deps</span> <span class="k">do</span>
  <span class="p">[</span>
    <span class="p">{</span><span class="ss">:ant</span><span class="p">,</span> <span class="s2">"~&gt; 0.0.1"</span><span class="p">}</span>
  <span class="p">]</span>
<span class="k">end</span>
</code></pre></div></div>
<p>By default <code class="language-plaintext highlighter-rouge">ant</code> uses Mnesia with in-memory persistence strategy (<code class="language-plaintext highlighter-rouge">:ram_copies</code>) and a single queue named <code class="language-plaintext highlighter-rouge">default</code>. It is good enough for us at the moment. For more advanced cases you can consider changing default persistence strategy to <code class="language-plaintext highlighter-rouge">:disc_copies</code> or <code class="language-plaintext highlighter-rouge">:disc_only_copies</code> in order to save jobs on a disk.
For additional available configuration, please check <a href="https://github.com/MikeAndrianov/ant?tab=readme-ov-file#configuration">Configuration section</a> in the GitHub repository.</p>

<p>The next step is to define a worker:</p>

<div class="language-elixir highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">defmodule</span> <span class="no">AntSandbox</span><span class="o">.</span><span class="no">SendPromotionWorker</span> <span class="k">do</span>
  <span class="n">alias</span> <span class="no">AntSandbox</span><span class="o">.</span><span class="no">Mailer</span>
  <span class="n">alias</span> <span class="no">AntSandbox</span><span class="o">.</span><span class="no">CreateLead</span>

  <span class="kn">use</span> <span class="no">Ant</span><span class="o">.</span><span class="no">Worker</span><span class="p">,</span> <span class="ss">max_attempts:</span> <span class="mi">3</span>

  <span class="nv">@impl</span> <span class="no">Ant</span><span class="o">.</span><span class="no">Worker</span>
  <span class="k">def</span> <span class="n">perform</span><span class="p">(%{</span><span class="ss">args:</span> <span class="p">%{</span><span class="ss">email:</span> <span class="n">email</span><span class="p">}}</span> <span class="o">=</span> <span class="n">_worker</span><span class="p">)</span> <span class="k">do</span>
    <span class="n">with</span> <span class="p">{</span><span class="ss">:ok</span><span class="p">,</span> <span class="n">_lead</span><span class="p">}</span> <span class="o">&lt;-</span> <span class="no">CreateLead</span><span class="o">.</span><span class="n">call</span><span class="p">(</span><span class="n">email</span><span class="p">)</span> <span class="k">do</span>
      <span class="no">Mailer</span><span class="o">.</span><span class="n">send_promotion</span><span class="p">(</span><span class="n">email</span><span class="p">)</span>
    <span class="k">end</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<p>Worker module should include <code class="language-plaintext highlighter-rouge">use Ant.Worker</code> line and implement <code class="language-plaintext highlighter-rouge">perform</code> function with <code class="language-plaintext highlighter-rouge">%Ant.Worker{}</code> struct as an argument. It contains <code class="language-plaintext highlighter-rouge">args</code> field with the arguments passed to <code class="language-plaintext highlighter-rouge">perform_async</code> function, which schedules the job. Even though Mnesia can store not only basic types like atoms, integers, strings, but also complex data types like maps, lists, or tuples, it is recommended to pass only basic types as arguments.
For this worker I decided to increase retries to <code class="language-plaintext highlighter-rouge">3</code> by setting <code class="language-plaintext highlighter-rouge">max_attempts</code> option. Without it, the failed job will stay in <code class="language-plaintext highlighter-rouge">failed</code> state and will not be retried.</p>

<p><code class="language-plaintext highlighter-rouge">CreateLead</code> module looks simple:</p>
<div class="language-elixir highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">defmodule</span> <span class="no">AntSandbox</span><span class="o">.</span><span class="no">CreateLead</span> <span class="k">do</span>
  <span class="c1"># emulate lead creation</span>
  <span class="k">def</span> <span class="n">call</span><span class="p">(</span><span class="n">email</span><span class="p">)</span> <span class="k">do</span>
    <span class="k">if</span> <span class="no">String</span><span class="o">.</span><span class="n">contains?</span><span class="p">(</span><span class="n">email</span><span class="p">,</span> <span class="s2">"smith"</span><span class="p">)</span> <span class="ow">and</span> <span class="no">String</span><span class="o">.</span><span class="n">contains?</span><span class="p">(</span><span class="n">email</span><span class="p">,</span> <span class="s2">"yahoo"</span><span class="p">)</span> <span class="k">do</span>
      <span class="p">{</span><span class="ss">:error</span><span class="p">,</span> <span class="s2">"Invalid email"</span><span class="p">}</span> <span class="c1"># emulate validation error</span>
    <span class="k">else</span>
      <span class="no">Process</span><span class="o">.</span><span class="n">sleep</span><span class="p">(</span><span class="mi">100</span><span class="p">)</span>
      <span class="p">{</span><span class="ss">:ok</span><span class="p">,</span> <span class="p">%{</span><span class="ss">email:</span> <span class="n">email</span><span class="p">}}</span>
    <span class="k">end</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>
<p>It emulates validation error for emails containing <code class="language-plaintext highlighter-rouge">"smith"</code> at <code class="language-plaintext highlighter-rouge">yahoo</code> domain. For other cases it sleeps the process for 100 milliseconds and returns okay tuple.</p>

<p>Only <code class="language-plaintext highlighter-rouge">Mailer</code> is missing. It is responsible for sending emails with a promotion to leads. Here is the implementation:</p>
<div class="language-elixir highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">defmodule</span> <span class="no">AntSandbox</span><span class="o">.</span><span class="no">Mailer</span> <span class="k">do</span>
  <span class="c1"># emulate sending emails</span>
  <span class="k">def</span> <span class="n">send_promotion</span><span class="p">(</span><span class="n">email</span><span class="p">)</span> <span class="k">do</span>
    <span class="k">if</span> <span class="ss">:rand</span><span class="o">.</span><span class="n">uniform</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span> <span class="o">==</span> <span class="mi">1</span> <span class="k">do</span>
      <span class="k">raise</span> <span class="s2">"Failed to send email to </span><span class="si">#{</span><span class="n">email</span><span class="si">}</span><span class="s2">"</span>
    <span class="k">else</span>
      <span class="no">Process</span><span class="o">.</span><span class="n">sleep</span><span class="p">(</span><span class="mi">100</span><span class="p">)</span>
    <span class="k">end</span>

    <span class="ss">:ok</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>
<p>Most of the time it sleeps a process for 100 milliseconds and later returns <code class="language-plaintext highlighter-rouge">:ok</code>, but may raise an exception randomly.
The last step is to test our application.</p>

<div class="language-elixir highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">iex</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span><span class="o">&gt;</span> <span class="no">AntSandbox</span><span class="o">.</span><span class="n">call</span><span class="p">()</span>
<span class="ss">:ok</span>
</code></pre></div></div>

<p>Now we can check jobs and their statuses.
For fetching all workers, you can use <code class="language-plaintext highlighter-rouge">Ant.Workers.list_workers()</code>. It returns a list of workers<code class="language-plaintext highlighter-rouge">%Ant.Worker{}</code> regardless of their status:</p>
<div class="language-elixir highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">iex</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span><span class="o">&gt;</span> <span class="no">Ant</span><span class="o">.</span><span class="no">Workers</span><span class="o">.</span><span class="n">list_workers</span><span class="p">()</span>
  <span class="p">{</span><span class="ss">:ok</span><span class="p">,</span>
   <span class="p">[</span>
      <span class="p">%</span><span class="no">Ant</span><span class="o">.</span><span class="no">Worker</span><span class="p">{</span>
        <span class="ss">id:</span> <span class="mi">4628067</span><span class="p">,</span>
        <span class="ss">worker_module:</span> <span class="no">AntSandbox</span><span class="o">.</span><span class="no">SendPromotionWorker</span><span class="p">,</span>
        <span class="ss">queue_name:</span> <span class="ss">:default</span><span class="p">,</span>
        <span class="ss">args:</span> <span class="p">%{</span><span class="ss">email:</span> <span class="s2">"jane.jones248@yahoo.com"</span><span class="p">},</span>
        <span class="ss">status:</span> <span class="ss">:enqueued</span><span class="p">,</span>
        <span class="ss">attempts:</span> <span class="mi">0</span><span class="p">,</span>
        <span class="ss">scheduled_at:</span> <span class="sx">~U[2025-01-11 16:30:18.466259Z]</span><span class="p">,</span>
        <span class="ss">updated_at:</span> <span class="sx">~U[2025-01-11 16:30:18.466260Z]</span><span class="p">,</span>
        <span class="ss">errors:</span> <span class="p">[],</span>
        <span class="ss">opts:</span> <span class="p">[</span><span class="ss">max_attempts:</span> <span class="mi">3</span><span class="p">]</span>
      <span class="p">},</span>
      <span class="o">...</span>
    <span class="p">]</span>
  <span class="p">}</span>
</code></pre></div></div>

<p>It’s possible to filter by worker attributes.</p>

<p>For example by status (<code class="language-plaintext highlighter-rouge">:enqueued</code>, <code class="language-plaintext highlighter-rouge">:running</code>, <code class="language-plaintext highlighter-rouge">:scheduled</code>, <code class="language-plaintext highlighter-rouge">:completed</code>, <code class="language-plaintext highlighter-rouge">:failed</code>, <code class="language-plaintext highlighter-rouge">:retrying</code>, <code class="language-plaintext highlighter-rouge">:cancelled</code>):</p>

<div class="language-elixir highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">iex</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span><span class="o">&gt;</span> <span class="no">Ant</span><span class="o">.</span><span class="no">Workers</span><span class="o">.</span><span class="n">list_workers</span><span class="p">(%{</span><span class="ss">status:</span> <span class="ss">:completed</span><span class="p">})</span>
  <span class="p">{</span><span class="ss">:ok</span><span class="p">,</span>
   <span class="p">[</span>
      <span class="p">%</span><span class="no">Ant</span><span class="o">.</span><span class="no">Worker</span><span class="p">{</span>
        <span class="ss">id:</span> <span class="mi">238946</span><span class="p">,</span>
        <span class="ss">worker_module:</span> <span class="no">AntSandbox</span><span class="o">.</span><span class="no">SendPromotionWorker</span><span class="p">,</span>
        <span class="ss">queue_name:</span> <span class="ss">:default</span><span class="p">,</span>
        <span class="ss">args:</span> <span class="p">%{</span><span class="ss">email:</span> <span class="s2">"sarah.davis727@gmail.com"</span><span class="p">},</span>
        <span class="ss">status:</span> <span class="ss">:completed</span><span class="p">,</span>
        <span class="ss">attempts:</span> <span class="mi">3</span><span class="p">,</span>
        <span class="ss">scheduled_at:</span> <span class="no">nil</span><span class="p">,</span>
        <span class="ss">updated_at:</span> <span class="sx">~U[2025-01-11 17:21:02.565686Z]</span><span class="p">,</span>
        <span class="ss">errors:</span> <span class="p">[</span>
        <span class="p">%{</span>
            <span class="ss">error:</span> <span class="s2">"Failed to send email to sarah.davis727@gmail.com"</span><span class="p">,</span>
            <span class="ss">attempt:</span> <span class="mi">2</span><span class="p">,</span>
            <span class="ss">stack_trace:</span> <span class="s2">"(ant_sandbox 0.1.0) lib/mailer.ex:5: AntSandbox.Mailer.send_promotion/1</span><span class="se">\n</span><span class="s2">..."</span><span class="p">,</span>
            <span class="ss">attempted_at:</span> <span class="sx">~U[2025-01-11 17:20:24.732696Z]</span>
        <span class="p">},</span>
        <span class="p">%{</span>
            <span class="ss">error:</span> <span class="s2">"Failed to send email to sarah.davis727@gmail.com"</span><span class="p">,</span>
            <span class="ss">attempt:</span> <span class="mi">1</span><span class="p">,</span>
            <span class="ss">stack_trace:</span> <span class="s2">"(ant_sandbox 0.1.0) lib/mailer.ex:5: AntSandbox.Mailer.send_promotion/1..."</span><span class="p">,</span>
            <span class="ss">attempted_at:</span> <span class="sx">~U[2025-01-11 17:20:08.150039Z]</span>
        <span class="p">}</span>
        <span class="p">],</span>
        <span class="ss">opts:</span> <span class="p">[</span><span class="ss">max_attempts:</span> <span class="mi">3</span><span class="p">]</span>
    <span class="p">},</span>
    <span class="o">...</span>
   <span class="p">]}</span>
</code></pre></div></div>

<p>Or by multiple attributes:</p>
<div class="language-elixir highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">iex</span><span class="p">(</span><span class="mi">4</span><span class="p">)</span><span class="o">&gt;</span> <span class="no">Ant</span><span class="o">.</span><span class="no">Workers</span><span class="o">.</span><span class="n">list_workers</span><span class="p">(%{</span>
<span class="o">...</span><span class="p">(</span><span class="mi">4</span><span class="p">)</span><span class="o">&gt;</span>   <span class="ss">queue_name:</span> <span class="ss">:default</span><span class="p">,</span>
<span class="o">...</span><span class="p">(</span><span class="mi">4</span><span class="p">)</span><span class="o">&gt;</span>   <span class="ss">status:</span> <span class="ss">:failed</span><span class="p">,</span>
<span class="o">...</span><span class="p">(</span><span class="mi">4</span><span class="p">)</span><span class="o">&gt;</span>   <span class="ss">args:</span> <span class="p">%{</span><span class="ss">email:</span> <span class="s2">"jane.smith734@yahoo.com"</span><span class="p">}</span>
<span class="o">...</span><span class="p">(</span><span class="mi">4</span><span class="p">)</span><span class="o">&gt;</span> <span class="p">})</span>
  <span class="p">{</span><span class="ss">:ok</span><span class="p">,</span>
   <span class="p">[</span>
      <span class="p">%</span><span class="no">Ant</span><span class="o">.</span><span class="no">Worker</span><span class="p">{</span>
        <span class="ss">id:</span> <span class="mi">1150403</span><span class="p">,</span>
        <span class="ss">worker_module:</span> <span class="no">AntSandbox</span><span class="o">.</span><span class="no">SendPromotionWorker</span><span class="p">,</span>
        <span class="ss">queue_name:</span> <span class="ss">:default</span><span class="p">,</span>
        <span class="ss">args:</span> <span class="p">%{</span><span class="ss">email:</span> <span class="s2">"jane.smith734@yahoo.com"</span><span class="p">},</span>
        <span class="ss">status:</span> <span class="ss">:failed</span><span class="p">,</span>
        <span class="ss">attempts:</span> <span class="mi">3</span><span class="p">,</span>
        <span class="ss">scheduled_at:</span> <span class="no">nil</span><span class="p">,</span>
        <span class="ss">updated_at:</span> <span class="sx">~U[2025-01-11 17:31:29.615924Z]</span><span class="p">,</span>
        <span class="ss">errors:</span> <span class="p">[</span>
        <span class="p">%{</span>
            <span class="ss">error:</span> <span class="s2">"Expected :ok or {:ok, _result}, but got {:error, </span><span class="se">\"</span><span class="s2">Invalid email</span><span class="se">\"</span><span class="s2">}"</span><span class="p">,</span>
            <span class="ss">attempt:</span> <span class="mi">3</span><span class="p">,</span>
            <span class="ss">stack_trace:</span> <span class="no">nil</span><span class="p">,</span>
            <span class="ss">attempted_at:</span> <span class="sx">~U[2025-01-11 17:31:29.615792Z]</span>
        <span class="p">},</span>
        <span class="p">%{</span>
            <span class="ss">error:</span> <span class="s2">"Expected :ok or {:ok, _result}, but got {:error, </span><span class="se">\"</span><span class="s2">Invalid email</span><span class="se">\"</span><span class="s2">}"</span><span class="p">,</span>
            <span class="ss">attempt:</span> <span class="mi">2</span><span class="p">,</span>
            <span class="ss">stack_trace:</span> <span class="no">nil</span><span class="p">,</span>
            <span class="ss">attempted_at:</span> <span class="sx">~U[2025-01-11 17:30:56.964108Z]</span>
        <span class="p">},</span>
        <span class="p">%{</span>
            <span class="ss">error:</span> <span class="s2">"Expected :ok or {:ok, _result}, but got {:error, </span><span class="se">\"</span><span class="s2">Invalid email</span><span class="se">\"</span><span class="s2">}"</span><span class="p">,</span>
            <span class="ss">attempt:</span> <span class="mi">1</span><span class="p">,</span>
            <span class="ss">stack_trace:</span> <span class="no">nil</span><span class="p">,</span>
            <span class="ss">attempted_at:</span> <span class="sx">~U[2025-01-11 17:30:32.909500Z]</span>
        <span class="p">}</span>
        <span class="p">],</span>
        <span class="ss">opts:</span> <span class="p">[</span><span class="ss">max_attempts:</span> <span class="mi">3</span><span class="p">]</span>
      <span class="p">}</span>
    <span class="p">]}</span>
</code></pre></div></div>
<p>If a worker fails during execution, data about failed attempts will be stored in the <code class="language-plaintext highlighter-rouge">errors</code> field. It contains the error message, stack trace, attempt number, and timestamp of the attempt. An example of such a worker can be observed above.</p>

<p>Also it is possible to fetch worker by its id:</p>

<div class="language-elixir highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">iex</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span><span class="o">&gt;</span> <span class="no">Ant</span><span class="o">.</span><span class="no">Workers</span><span class="o">.</span><span class="n">get_worker</span><span class="p">(</span><span class="mi">1150403</span><span class="p">)</span>
  <span class="p">{</span><span class="ss">:ok</span><span class="p">,</span> <span class="p">%</span><span class="no">Ant</span><span class="o">.</span><span class="no">Worker</span><span class="p">{</span><span class="o">...</span><span class="p">}}</span>
</code></pre></div></div>

<h3 id="whats-the-catch">What’s the catch?</h3>

<p>It’s definitely easy to use this library. It is simple and flexible. It doesn’t require any additional database.
Nevertheless, there are two important topics to consider:</p>
<ol>
  <li>
    <p><strong>Persistence in a cloud</strong> <br />
When Mnesia is configured to store data on disk using <code class="language-plaintext highlighter-rouge">:disc_copies</code> (memory and disk) or <code class="language-plaintext highlighter-rouge">:disc_only_copies</code> (disk only), it writes to table files in a specified directory. <br />
Modern cloud platforms like Heroku or Fly.io can store only ephemeral data. That means that after the application is restarted, all data from the disk will be lost.
Luckily, you can use <a href="https://fly.io/docs/volumes/overview/">Volumes</a> to create a persistent storage. It may require some additional time and effort to configure it properly, especially for larger applications, that require scalability. Even though it’s solvable, it’s becomes harder to set it up comparing with more popular solutions, like Oban backed by PostgreSQL.</p>
  </li>
  <li>
    <p><strong>Mnesia is not widely used in the web development</strong> <br />
It’s significantly less popular storage solution. There are no nearly as many available resources and guides. I wish somebody experienced would write a book about it. I found difficult to comprehend the <a href="https://www.erlang.org/doc/apps/mnesia/mnesia.html">documentation</a>.</p>
  </li>
</ol>

<p><br />
For further development I would like to hear your feedback. What you would like to see in the future versions of the library? What is crucial for you to start using it? <a href="mailto:mikeandrianov@gmail.com">Please share your thoughts with me through the email</a>.</p>

<p><br />
You can find <a href="https://github.com/MikeAndrianov/ant">Ant on the Github</a>. Thank you for reading my article.</p>]]></content><author><name></name></author><category term="elixir" /><summary type="html"><![CDATA[In this post, we will explore Ant, my new background job processing library for Elixir, designed with simplicity in mind. It is built on Mnesia as a storage solution and includes retry mechanisms out of the box.]]></summary></entry><entry><title type="html">Overcoming irregular delivery</title><link href="http://localhost:4000/overcoming-irregular-delivery.html" rel="alternate" type="text/html" title="Overcoming irregular delivery" /><published>2024-02-01T01:45:00+01:00</published><updated>2024-02-01T01:45:00+01:00</updated><id>http://localhost:4000/overcoming-irregular-delivery</id><content type="html" xml:base="http://localhost:4000/overcoming-irregular-delivery.html"><![CDATA[<p>Lately, my mentee and I have been focused on enhancing impact within the team. One goal we set was to improve reliability and visibility by starting to deliver regularly. 
Ideally, we would be delivering at least one commit daily even though it doesn’t necessarily mean to close a new ticket each day.</p>

<p>To assist my mentee in overcoming potential obstacles that might stop him from accomplishing the goal, I have created a diagram, which I decided to share with the wider audience as I believe it can be useful for more engineers.</p>

<p>I broke the abstract “can’t commit daily” question into the 3 main sections:</p>

<ol>
  <li>
    <p><strong>Problems</strong> <br />
What prevents engineers from regular delivery. Often, these are the responses you’d receive when inquiring about the delay in completing a feature.</p>
  </li>
  <li>
    <p><strong>Root causes</strong> <br />
Identifying the root causes that give rise to issues in the delivery process.</p>
  </li>
  <li>
    <p><strong>Solutions</strong> <br />
Offering practical solutions for addressing each of the identified root causes. These serve as recipes for overcoming the challenges associated with regular delivery.</p>
  </li>
</ol>

<p><a href="/assets/img/irregular-delivery-diagram.png"><img src="/assets/img/irregular-delivery-diagram.png" alt="Irregular delivery diagram" /></a></p>

<h2 id="problem-1-tickets-complexity">Problem 1. Ticket’s complexity</h2>

<p>Addressing this challenge can indeed be tricky, and it requires a thorough identification of the root causes.
Let’s go through the most popular root causes one by one.</p>

<h3 id="1-unclear-requirements">1. <strong>Unclear requirements</strong></h3>
<p>Engineer dove into feature development without a comprehensive understanding of the outcome, resulting in numerous iterations or, in extreme cases, 
the need for complete rebuilding of the delivered work. 
Ideally, initiating work should only commence when the final goal is crystal clear, well-understood, and logically sound. 
Depending on the feature, it may be beneficial to also include such things as the acceptance criteria, development breakdown, link to the design, etc.</p>

<p><strong>Solution:</strong> don’t be shy and seek input from relevant colleagues, including product managers, designers, other developers, and stakeholders. Don’t hesitate to request additional details until the requirements are thoroughly clarified.
Proactively seek input from relevant colleagues, including product managers, designers, fellow developers, and stakeholders. Don’t hesitate to request additional details until the requirements are thoroughly clarified. 
Open communication ensures a comprehensive understanding of the project, reducing the likelihood of ambiguity and facilitating smoother development processes.</p>

<h3 id="2-ticket-is-too-big">2. <strong>Ticket is too big</strong></h3>
<p>In some cases, a ticket may be well-defined from a business perspective, yet engineers working on it might encounter challenges with the delivery. 
Some people may develop locally and only commit changes when they finish the ticket. 
Additionally, based on my observations, the review process tends to slow down as the size of the corresponding pull request increases. 
This, in turn, can lead to a prolonged period of stagnation in the review phase.</p>

<p><strong>Solution:</strong> break down large tickets into smaller, more granular tasks, which are easier to understand, implement, review, and test.</p>

<h3 id="3-ticket-is-too-difficult">3. <strong>Ticket is too difficult</strong></h3>
<p>Even if a ticket is exceptionally well-defined, there are instances where it’s too challenging for the assigned individual to tackle it alone.</p>

<p><strong>Solution:</strong> discuss with colleagues implementation details and set milestones. When necessary ask for the review while the pool request is still a draft.</p>

<h2 id="problem-2-stuck-or-blocked">Problem 2. Stuck or blocked</h2>
<p>Working in an environment of uncertainty is common, with potential issues like buggy libraries, missing documentation, and complex codebases. 
Recognizing the right time to seek help is crucial to avoid unnecessary time wastage. 
Please keep in mind, that before asking you did everything you could to resolve the problem by your own: 
from googling and usage of AI tools to reading library and internal documentation. Asking for help should be the next step after giving your best shot at solving the problem independently.</p>

<p><strong>Solution:</strong> ask for help.</p>

<p>There are a couple of tricks to keep in mind, and how to do it properly to receive necessary help faster and effectively:</p>

<ol>
  <li>
    <p><strong>Ask questions in public channels instead of pinging people directly</strong> <br />
It increases the probability of resolving problems faster and also increases visibility. 
That means a wider audience will know about your current status. This is especially important when working remotely.</p>
  </li>
  <li>
    <p><strong>Specify as much information as possible</strong> <br />
Don’t be afraid to overcommunicate. It’s always better to provide more information, rather than less. Please keep in mind, that other people need to understand the context and the problem quickly.
Not everyone is eager to play ping-pong with additional questions and answers. So try to prevent it.
Write an extensive description of what you have done so far, your conclusions, or suspicions. Share links to the ticket, code, logs, etc.</p>
  </li>
  <li>
    <p><strong>Be proactive</strong> <br />
After all you are responsible for resolving your issues. If nobody helps, don’t reassure yourself that you asked and can rest until someone finally help you. 
Ping your team members, ask question in different channels, send follow-ups, do everything you can to facilitate resolving the issue.</p>
  </li>
</ol>

<p><br />
Do you struggle with something else and don’t know how to deal with it? <a href="mailto:mikeandrianov@gmail.com">Send me an email</a>. Perhaps I could help. It’s always worth asking.</p>]]></content><author><name></name></author><category term="mentorship" /><summary type="html"><![CDATA[What are the main problems, and root causes of non-regular delivery, and how do start delivering consistently as a software engineer? You can find answers in this article.]]></summary></entry><entry><title type="html">Why seniors often reject proposals from less experienced colleagues</title><link href="http://localhost:4000/why-do-seniors-reject-new-ideas.html" rel="alternate" type="text/html" title="Why seniors often reject proposals from less experienced colleagues" /><published>2023-11-26T01:45:00+01:00</published><updated>2023-11-26T01:45:00+01:00</updated><id>http://localhost:4000/why-do-seniors-reject-new-ideas</id><content type="html" xml:base="http://localhost:4000/why-do-seniors-reject-new-ideas.html"><![CDATA[<blockquote>
  <p>“It’s so annoying to work with senior developers in my team. I encourage them to try to introduce a new technology / framework / approach, but they always push back, like they don’t want anything.”</p>
</blockquote>

<p>From time to time I hear such complains. They usually come from frustrated junior or mid-level developers.
These individuals, having already gained some experience and managing daily tasks competently, possess a keen motivation to expand their skill sets further.
Eagerness to explore new tools is commendable, but it’s essential to comprehend why seasoned professionals might resist these suggestions.
Let’s assume you don’t work with crazy people. If this is the case, let’s explore potential reasons behind the rejection of your proposals.</p>

<h3 id="reasons-why-your-proposals-may-be-rejected">Reasons why your proposals may be rejected:</h3>

<ol>
  <li>
    <p><strong>Hiring and technological diversity challenges</strong> <br />
Consider a scenario: your product is primarily developed in Python, and you propose implementing one or more microservices using Go.
While experimenting with new technologies is exciting, envision the implications a year down the line when the project hosts
a multitude of microservices built on different programming languages like Python, Go, Elixir, Rust, NodeJS, and more.
This might lead to complexities in hiring new talent, issues with code quality, and the readiness of developers (especially less experienced)
to navigate diverse technologies for troubleshooting. Ultimately, business objectives may prioritize stability over unchecked experimentation.</p>
  </li>
  <li>
    <p><strong>Time and financial investment for technology adoption</strong> <br />
Adopting a new tool demands more than personal learning; it entails team-wide integration.
Consequently, business owners may need to invest resources in training employees for effective adoption, diverting focus
and capital from developing new functionality or resolving accumulated problems.</p>
  </li>
  <li>
    <p><strong>Initial development slowdown</strong> <br />
Introducing new technology typically causes a temporary slowdown in development speed.
Acclimating to a new ecosystem involves understanding coding practices, patterns, and libraries, which can impact productivity in the short term.</p>
  </li>
  <li>
    <p><strong>Deployment complexities</strong> <br />
Consider a company utilizing a standardized deployment method in Python, perhaps with some Docker template.
Introducing a new technology not only demands developers’ attention but also requires DevOps involvement in setting up and deploying this new system.</p>
  </li>
</ol>

<p>We could go on and on, but I hope the idea is clear.
Sometimes, what may seem like a lack of enthusiasm from experienced seniors could actually be a strategic approach to anticipate and prevent potential future issues.
Their cautious approach might stem from a desire to foresee challenges and maintain stability in the long run.</p>

<h3 id="how-to-navigate-this-situation">How to navigate this situation?</h3>

<p>I hope I didn’t upset you too much and didn’t discourage you with my rumbling.<br />
Here’s some advice: master the art of persuasion.
Instead of simply suggesting, “Let’s explore Go for our new service — it’s fun!”, focus on creating a compelling case.
Start by identifying the pain points your team currently faces with existing technologies.
Explain precisely how adopting the new technology can address these issues. Describe the advantages and disadvantages of its integration.
Sometimes, even if your team appreciates the idea, other pressing priorities might not allow adopting your suggestion.
Therefore, prepare yourself to refine your abilities and experiment with new tools in your personal projects.
It becomes even more impressive if your experimentation extends beyond localhost and results in deployment
to a production environment, perhaps even attracting some real users.
This not only improves your technical skills but also provides insights into product development, marketing strategies, and other areas.
Broader perspective can substantially boost your career in the future.</p>

<p>Questions or thoughts? Please feel free to <a href="mailto:mikeandrianov@gmail.com">drop me a letter</a>.</p>]]></content><author><name></name></author><category term="opinion" /><summary type="html"><![CDATA[Here's my take on why seasoned developers often turn down suggestions from less experienced colleagues, along with some guidance on how to navigate this situation.]]></summary></entry><entry><title type="html">Static website creation on Jekyll with ease</title><link href="http://localhost:4000/create-static-website-with-jekyll.html" rel="alternate" type="text/html" title="Static website creation on Jekyll with ease" /><published>2023-07-01T23:31:51+02:00</published><updated>2023-07-01T23:31:51+02:00</updated><id>http://localhost:4000/create-static-website-with-jekyll</id><content type="html" xml:base="http://localhost:4000/create-static-website-with-jekyll.html"><![CDATA[<p>I’ve always enjoyed sharing my knowledge, thoughts, and ideas with others. As soon as I matured as a software engineer, I decided to create an account on Medium and start writing about topics that intrigued me and could be of interest to others.</p>

<p>However, nowadays more and more content becomes hidden behind the paywall. This led me to seek an alternative platform for my humble content.
Although I typically prefer ready-made solutions over reinventing the wheel, this time though
I felt the urge to redesign my personal website for the first time in ten years of its existence. The idea of creating a small static website with personal information and a blog seemed fitting.
Being an experienced Ruby (and Rails) developer, I was thrilled to leverage my acquired knowledge and finally craft a <a href="https://www.youtube.com/watch?v=Gzj723LkRJY">blog in 15 minutes</a>! Just before writing the cherished <code class="language-plaintext highlighter-rouge">rails new blog</code>, I swiftly researched on out-of-the-box solutions for static websites. Why invest 15 minutes when merely 5 minutes could suffice with the aid of a specific tool? Of course, neither 5 nor 15 minutes can yield something truly meaningful, but you got the idea, right?</p>

<p>I formulated the next criteria:</p>
<ol>
  <li>
    <p><strong>Lightweight and easy to use</strong> <br />
Something, which allows to hit the ground running without spending too much time reading
documentation.</p>
  </li>
  <li>
    <p><strong>Easy to host</strong> <br />
I host my page on GitHub pages and ideally wanted to continue as this is more than enough for
my needs.</p>
  </li>
  <li>
    <p><strong>Customizable</strong> <br />
Maybe tomorrow I will add another page with a nice-looking gallery with images of unicorns. Who knows.</p>
  </li>
</ol>

<p>Once I crystallized these criteria, the answer poped out from my mind. I have read about
<a href="https://jekyllrb.com">Jekyll</a> some time ago. It turned out it was a great candidate that met my needs. The bonus point was
that it is written in Ruby! Please don’t drop this article if you are not familiar with Ruby as it turned out that besides Ruby itself
it only needed to install a gem and start the project:</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby">  <span class="n">gem</span> <span class="n">install</span> <span class="n">bundler</span> <span class="n">jekyll</span>
  <span class="n">jekyll</span> <span class="n">new</span> <span class="n">my</span><span class="o">-</span><span class="n">site</span>
  <span class="n">cd</span> <span class="n">my</span><span class="o">-</span><span class="n">site</span>
  <span class="n">bundle</span> <span class="nb">exec</span> <span class="n">jekyll</span> <span class="n">serve</span> <span class="o">--</span><span class="n">livereload</span></code></pre></figure>

<p>“Why choose Jekyll over writing plain HTML?” you may wonder. Because it supports some convenient features, which simplify development:
layouts, templates with Liquid, ability to create content not only in HTML, but also using Markdown and the easiest deployment
to GitHub pages. Let’s go through everything in order.</p>

<h3 id="pages">Pages</h3>

<p>The most essential part of building a static website. They can be written in HTML or Markdown.
Some examples of pages: <code class="language-plaintext highlighter-rouge">index.html</code>, <code class="language-plaintext highlighter-rouge">blog.html</code>, <code class="language-plaintext highlighter-rouge">about.markdown</code>, etc. Just drop these files into
the root of the project. Also, pages can also be organized into subfolders, if some organization is required.</p>

<h3 id="configuration">Configuration</h3>

<p>Basic configuration can be set in <code class="language-plaintext highlighter-rouge">_config.yml</code>. Sometimes it’s needed to set a custom configuration for a specific page or post.
For such cases, Jekyll provides the tool called Front Matter. It can be used for setting predefined global variables like
title and layout, as well as any other custom variable you need.</p>

<p>To implement Front Matter, place YAML-formatted configurations at the top of the page, encased within three-dashed lines:</p>

<p>about.html</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="o">---</span>
<span class="ss">layout: </span><span class="n">default</span>
<span class="ss">title: </span><span class="no">Custom</span> <span class="n">title</span>
<span class="ss">header: </span><span class="no">About</span>
<span class="o">---</span>

<span class="o">&lt;</span><span class="n">article</span><span class="o">&gt;</span>
  <span class="no">About</span> <span class="n">me</span>
<span class="o">&lt;</span><span class="sr">/article&gt;</span></code></pre></figure>

<h3 id="includes">Includes</h3>

<p>Repeatetive chunks of code can be extracted and organized within the <code class="language-plaintext highlighter-rouge">_includes</code> directory and included wherever needed.
Here are couple of examples of what make sense to move there: navigation, email subscription form, footer and so on.
Use <code class="language-plaintext highlighter-rouge">include</code> or <code class="language-plaintext highlighter-rouge">include_relative</code> directives to insert partial into the page.</p>

<figure class="highlight"><pre><code class="language-html" data-lang="html">...
<span class="nt">&lt;body&gt;</span>
  <span class="nt">&lt;header&gt;</span>
    {% include nav.html %}
  <span class="nt">&lt;/header&gt;</span>
  ...
<span class="nt">&lt;/body&gt;</span></code></pre></figure>

<h3 id="liquid-templates">Liquid templates</h3>

<p>While reading the example above you might wonder about the usage of <code class="language-plaintext highlighter-rouge">{% ... %}</code>. Indeed, this doesn’t
look like a pure HTML.
And you are right: Jekyll uses open-source template language called Liquid.
If you’re unfamiliar with it, all you need to know is that variables enclosed within double curly brackets, such as
<code class="language-plaintext highlighter-rouge">{{ page.title }}</code> will be rendered on a page. The code situated between curly bracket and percent
<code class="language-plaintext highlighter-rouge">{% if author %}</code> is not displayed on the page, but is used as control flow structure. More information
you can find in <a href="https://shopify.github.io/liquid">the official documentation</a>.</p>

<h3 id="layouts">Layouts</h3>

<p>Serve for containing basic repetitive code for pages, wrap content from pages. Loading of all necessary css and js files
is done there. For instance, consider the following layout template:</p>

<p>_layouts/default.html</p>

<figure class="highlight"><pre><code class="language-html" data-lang="html"><span class="cp">&lt;!DOCTYPE HTML&gt;</span>
<span class="nt">&lt;html&gt;</span>
<span class="nt">&lt;head&gt;</span>
  <span class="nt">&lt;title&gt;</span>{{ page.title }}<span class="nt">&lt;/title&gt;</span>
  <span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">"stylesheet"</span> <span class="na">href=</span><span class="s">"/assets/css/styles.css"</span><span class="nt">&gt;</span>
<span class="nt">&lt;/head&gt;</span>
<span class="nt">&lt;body&gt;</span>
  <span class="nt">&lt;header&gt;</span>
    {% include navigation.html %}

    <span class="nt">&lt;h2&gt;</span>{{page.header}}<span class="nt">&lt;/h2&gt;</span>
  <span class="nt">&lt;/header&gt;</span>

  {{ content }}
<span class="nt">&lt;/body&gt;</span>
<span class="nt">&lt;/html&gt;</span></code></pre></figure>

<p>The content of a page will be rendered in place of <code class="language-plaintext highlighter-rouge">{{ content }}</code> variable.</p>

<h3 id="variables">Variables</h3>

<p>Any file that includes Front Matter, is processed by Jekyll, allowing to use variables in your templates.
Here are main types of variables:</p>

<ol>
  <li>
    <p><strong>site</strong> <br />
This variable contains configuration elements sourced from <code class="language-plaintext highlighter-rouge">_config.yml</code> as well as global information.
Here are example of what can be accessed through it: <code class="language-plaintext highlighter-rouge">site.data</code> – data loaded from the <code class="language-plaintext highlighter-rouge">_data</code> directory,
<code class="language-plaintext highlighter-rouge">site.pages</code>, <code class="language-plaintext highlighter-rouge">site.posts</code>, <code class="language-plaintext highlighter-rouge">site.&lt;config&gt;</code> and so on.</p>
  </li>
  <li>
    <p><strong>paginator</strong> <br />
Is used for simplifying work with pagination: <code class="language-plaintext highlighter-rouge">paginator.page</code>, <code class="language-plaintext highlighter-rouge">paginator.total_pages</code>, <code class="language-plaintext highlighter-rouge">paginator.next_page</code>, etc.</p>
  </li>
  <li>
    <p><strong>page</strong> <br />
Is used for storing page-specific information. Any data specified via Front Matter in a given page resides within this variable.</p>
  </li>
</ol>

<p>about.html</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="o">---</span>
<span class="ss">title: </span><span class="no">Custom</span> <span class="n">title</span>
<span class="ss">header: </span><span class="no">About</span>
<span class="o">---</span>

<span class="o">&lt;</span><span class="n">article</span><span class="o">&gt;</span>
  <span class="no">About</span> <span class="n">me</span>
<span class="o">&lt;</span><span class="sr">/article&gt;
...</span></code></pre></figure>

<p>Later specified variables can be accessed like so:</p>

<p>_layouts/default.html</p>

<figure class="highlight"><pre><code class="language-html" data-lang="html"><span class="nt">&lt;html&gt;</span>
<span class="nt">&lt;head&gt;</span>
  <span class="nt">&lt;title&gt;</span> {{ page.title }} <span class="nt">&lt;/title&gt;</span>
  ...
<span class="nt">&lt;/head&gt;</span>
<span class="nt">&lt;body&gt;</span>
  <span class="nt">&lt;h2&gt;</span>{{page.header}}<span class="nt">&lt;/h2&gt;</span>
<span class="nt">&lt;/body&gt;</span></code></pre></figure>

<h3 id="data">Data</h3>

<p>You can create custom data files (in JSON, YAML, CSV, and TSV formats), which should be located in <code class="language-plaintext highlighter-rouge">_data</code> directory.
Later inside pages it can be accessed via <code class="language-plaintext highlighter-rouge">site.data</code> variable.
Let’s think about when it may be useful.
Consider a situation where you wish to incorporate a special gallery featuring unicorns. By creating a dedicated data file
for these unicorn profiles, you can maintain a structured repository of details that can be nicely integrated into your pages.</p>

<p>_data/unicorns.yml</p>

<figure class="highlight"><pre><code class="language-yml" data-lang="yml">  <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Bob</span>
    <span class="na">img</span><span class="pi">:</span> <span class="s">imgs/bob_unicorn.jpg</span>
    <span class="na">about</span><span class="pi">:</span> <span class="s">Likes walking in the forrest.</span>
  <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Patricia</span>
    <span class="na">img</span><span class="pi">:</span> <span class="s">imgs/patricia_unicorn.jpg</span>
    <span class="na">about</span><span class="pi">:</span> <span class="s">Used to live in mountains.</span>
  <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Kyle Jr</span>
    <span class="na">img</span><span class="pi">:</span> <span class="s">imgs/kyle_unicorn.jpg</span>
    <span class="na">about</span><span class="pi">:</span> <span class="s">Eats grass and pine cones.</span></code></pre></figure>

<p>index.html</p>

<figure class="highlight"><pre><code class="language-html" data-lang="html">{% for unicorn in site.data.unicorns %}
  <span class="nt">&lt;div&gt;</span>
    <span class="nt">&lt;h1&gt;</span>{{ unicorn.name }}<span class="nt">&lt;/h1&gt;</span>
    <span class="nt">&lt;p&gt;</span>{{ unicorn.about }}<span class="nt">&lt;/p&gt;</span>
    <span class="nt">&lt;img</span> <span class="na">src=</span><span class="s">{{</span> <span class="na">unicorn.img</span> <span class="err">}}</span> <span class="err">\</span><span class="nt">&gt;</span>
  <span class="nt">&lt;/div&gt;</span>
{% endfor %}</code></pre></figure>

<h3 id="posts">Posts</h3>

<p>Jekyll offers a straightforward method for creating a blog. Just drop HTML or Markdown files into <code class="language-plaintext highlighter-rouge">_posts</code> directory. Files
should be named in a specific format: <code class="language-plaintext highlighter-rouge">YYYY-MM-DD-title.md</code>, or <code class="language-plaintext highlighter-rouge">YYYY-MM-DD-title.html</code>. At the top of the most, you can
also use Front Matter:</p>

<figure class="highlight"><pre><code class="language-yaml" data-lang="yaml"><span class="nn">---</span>
<span class="na">layout</span><span class="pi">:</span> <span class="s">post</span>
<span class="na">title</span><span class="pi">:</span>  <span class="s">Static website creation on Jekyll with ease</span>
<span class="na">date</span><span class="pi">:</span>   <span class="s">2023-07-01 23:31:51 +0200</span>
<span class="na">categories</span><span class="pi">:</span> <span class="s">static websites</span>
<span class="nn">---</span>

<span class="s">Some **useful** content.</span></code></pre></figure>

<p>Now it’s time to render posts.</p>

<p>blog.html</p>

<figure class="highlight"><pre><code class="language-html" data-lang="html">{% for post in site.posts %}
  <span class="nt">&lt;article&gt;</span>
    <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">{{</span> <span class="na">post.url</span> <span class="err">}}</span><span class="nt">&gt;</span>
      <span class="nt">&lt;h1&gt;</span>{{ post.title }}<span class="nt">&lt;/h1&gt;</span>
      <span class="nt">&lt;p&gt;</span>{{ post.excerpt }}<span class="nt">&lt;/p&gt;</span>
    <span class="nt">&lt;/a&gt;</span>
  <span class="nt">&lt;/article&gt;</span>
{% endfor %}</code></pre></figure>

<h3 id="deployment">Deployment</h3>

<p>It turned out GitHub pages support Jekyll out of the box. Simply commit and push all your changes.
Everything else will handled by GitHub. Nice and easy!</p>

<p><br />
That’s all what I wanted to share today. Thank you for reading my post.
If you are interested in diving a bit deeper, I highly recomend to check out
<a href="https://jekyllrb.com/docs/">official documentation</a>.</p>]]></content><author><name></name></author><category term="static" /><category term="websites" /><summary type="html"><![CDATA[Exploring my transition from Medium to a personal Jekyll-powered blog. Take a look if you want to effortlessly create a static website. You will find all the basics to get familiar with this tool.]]></summary></entry></feed>